docker-defaults: &docker-defaults
  docker:
    - image: nyulibraries/circleci_docker:18.06.1-ce-git-compose-1.22.0
      environment:
        - IMAGE_NAME=getit
        - COMPOSE_PROJECT_NAME=getit
  working_directory: ~/app

auth_quay: &auth_quay
  run:
    name: Authenticate Quay
    command: |
      docker login -u "$QUAY_USERNAME" --password "$QUAY_PASSWORD" quay.io

build_docker: &build_docker
  run:
    name: Build Docker
    command: |
      export BRANCH_NO_SLASH=${CIRCLE_BRANCH//\//_}
      docker-compose build dev
      docker-compose -f docker-compose.build.yml build

pull_docker: &pull_docker
  run:
    name: Pull Docker
    command: |
      export BRANCH_NO_SLASH=${CIRCLE_BRANCH//\//_}
      docker pull quay.io/nyulibraries/${IMAGE_NAME}:${BRANCH_NO_SLASH} || docker pull quay.io/nyulibraries/${IMAGE_NAME}:latest

push_docker: &push_docker
  run:
    name: Push Docker
    command: |
      export BRANCH_NO_SLASH=${CIRCLE_BRANCH//\//_}
      docker push quay.io/nyulibraries/${IMAGE_NAME}:latest
      docker push quay.io/nyulibraries/${IMAGE_NAME}:${BRANCH_NO_SLASH}
      docker push quay.io/nyulibraries/${IMAGE_NAME}:${BRANCH_NO_SLASH}-${CIRCLE_SHA1}

junit_reports: &junit_reports
  run:
    name: Get Junit tests from stopped container
    when: always
    command: docker cp getit_test_run_1:/app/test-results .

run_tests: &run_tests
  run:
    name: Run tests
    command: |
      export BRANCH_NO_SLASH=${CIRCLE_BRANCH//\//_}
      docker-compose run test

version: 2
jobs:
  test:
    <<: *docker-defaults
    steps:
      - checkout
      - setup_remote_docker
      - <<: *auth_quay
      - <<: *pull_docker
      - <<: *build_docker
      - <<: *push_docker
      - <<: *run_tests
      - <<: *junit_reports
      - store_test_results:
          path: ~/app/test-results
      - store_artifacts:
          path: ~/app/test-results

  deploy-dev:
    <<: *docker-defaults
    steps:
      - setup_remote_docker
      - run:
          name: Deploy into staging via Jenkins
          command: |
            #docker run --rm appropriate/curl -u $JENKINS_USERNAME:$JENKINS_API_KEY -X POST http://jenkins.library.nyu.edu/view/GetIt/job/GetIt%20Development%20Deploy/build/api
            docker run --rm appropriate/curl -u $JENKINS_CI_USERNAME:$JENKINS_CI_API_KEY -X POST https://jenkinsci.library.nyu.edu/job/GetIt%20Dev%20Deploy/buildWithParameters\?GIT_COMMIT\=$CIRCLE_SHA1

  deploy-qa:
    <<: *docker-defaults
    steps:
      - setup_remote_docker
      - run:
          name: Deploy into QA via Jenkins
          command: |
            #docker run --rm appropriate/curl -u $JENKINS_USERNAME:$JENKINS_API_KEY -X POST http://jenkins.library.nyu.edu/view/GetIt/job/GetIt%20QA%20Deploy/build/api
            docker run --rm appropriate/curl -u $JENKINS_CI_USERNAME:$JENKINS_CI_API_KEY -X POST https://jenkinsci.library.nyu.edu/job/GetIt%20QA%20Deploy/buildWithParameters\?GIT_COMMIT\=$CIRCLE_SHA1

  deploy-prod:
    <<: *docker-defaults
    steps:
      - setup_remote_docker
      - run:
          name: Deploy into production via Jenkins
          command: |
            #docker run --rm appropriate/curl -u $JENKINS_USERNAME:$JENKINS_API_KEY -X POST http://jenkins.library.nyu.edu/view/GetIt/job/GetIt%20Production%20Deploy/build/api
            docker run --rm appropriate/curl -u $JENKINS_CI_USERNAME:$JENKINS_CI_API_KEY -X POST https://jenkinsci.library.nyu.edu/job/GetIt%20Prod%20Deploy/buildWithParameters\?GIT_COMMIT\=$CIRCLE_SHA1

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - test
      - deploy-dev:
          requires:
              - test
          filters:
            branches:
              ignore:
                - master
                - qa
      - deploy-qa:
          requires:
              - test
          filters:
            branches:
              only: qa
      - deploy-prod:
          requires:
              - test
          filters:
            branches:
              only: master
