<%
# Get and display holdings
holdings = holding.find_all{|response| response.service_type_value_name.eql? "holding"}
# Put current institution's holdings first.
(institutional_holding, other_holding) = holdings.partition {|response|
  current_primary_institution.code.to_s.eql?(response.service_data[:institution] || response.service.group) }
holdings = institutional_holding + other_holding
unless holdings.empty? %>
  <div class="container-fluid umlaut-holdings">
    <p style="margin-bottom: 1em;"><strong><%=
      link_to("View Maps and Call Number Locations",
        "http://library.nyu.edu/bobcat/callno/",
          :target=>"_blank") %></strong></p><%
    # Process each holding.
    holdings.each do |p|
      view_data = p.view_data
      # Only display holdings that aren't expired.
      unless view_data[:expired] == true %>
        <div class="umlaut-holding">
          <div class="row-fluid">
            <div class="span3"><strong><%= view_data[:collection_str] %></strong></div>
            <div class="span4"><%= view_data[:call_number]%></div><%
            # Set status class based on configured available statuses
            status_class = 
              umlaut_config.holdings.available_statuses.include?(view_data[:status]) ? 
                'text-success' : '' %>
            <div class="span3 <%= status_class %>"><%= view_data[:status] %></div>
            <div class="span2">
              <%= link_to("More Info", {:controller=>"link_router", :id=>p.id}, 
                :target => "_blank", :class=>"btn btn-success") %>
              <%= # Request link
                if view_data[:source_data] and holding_request?(view_data[:status], view_data[:status_code], view_data[:requestability], 
                  view_data[:source_data][:adm_library_code], view_data[:source_data][:sub_library_code])
                # Generate a hyperlink for standard service action with
                # class "ajax_window" for unobtrusive JS.
                if current_user and view_data[:request_link_supports_ajax_call]
                  link_to("Request", new_holding_request_url(p.id), :target=>"_blank", 
                    :class=>"btn btn-primary ajax_window")
                elsif current_user # Ordinary href link to request_url (without ajax_window class).
                  link_to("Request", new_holding_request_url(p.id), :target=>"_blank", 
                    :class=>"btn btn-primary")
                else #Send to login screen.
                  link_to("Request", login_url({:return_url=>current_permalink_url, 
                    :service_response_id=>p.id}), :target=>"_blank", :class=>"btn btn-primary")
                end
              end %>
            </div>
          </div>
          <% # Display edition info
          if (not view_data[:match_reliability].blank?) and 
            view_data[:match_reliability] != ServiceResponse::MatchExact %>
            <div class="row-fluid">
              <div class="span11 offset1">
                <div class="umlaut-content-indent edition_information">
                  <% unless view_data[:edition_str].blank? %>
                    <em class="text-info">Edition information</em> <%= view_data[:edition_str] %>
                  <% else %>
                    <em class="text-info">May be alternate edition.</em>
                  <% end %>
                <div>
              </div>
            </div><%
          end
          # Display notes
          unless view_data[:notes].blank? %>
            <div class="row-fluid notes">
              <div class="span11 offset1"><%= view_data[:notes] %></div>
            </div><%
          end
          # Display coverage
          unless view_data[:coverage].blank? %>
            <div class="row-fluid coverage">
              <div class="span11 offset1"><%=
                list_with_limit("copies_#{p.id}", view_data[:coverage_str_array]) do |item, index| %>
                  <li><%= item %></li><%
                end %>
              </div>
            </div><%
          end %>
        </div><%
      end
    end %>
  </div><%
  # In order to make sure we always get the freshest
  # holdings data we expire old holdings.
  # Similar to RTA in Primo.
  expire_old_holdings(@user_request, holdings)
end
# Process the case where holdings are empty
if holdings.empty? %>
  <div class="umlaut-content-indent"><%
    # Get and display holding searches
    searches = holding.find_all{|response| response.service_type_value_name.eql? "holding_searches"}
    searches.each do | result_st |
      response = result_st.view_data %>
      <p class="umlaut-holding-search"><%= link_to response[:display_text], 
        {:controller=>'link_router', :id => result_st.id}, 
          :target => "_blank" %></p><%
    end
    # Display "Not Available" if we've completed our service run and 
    # both holdings and holding searches are empty
    if (holdings.blank? and searches.blank? and 
      (not service_types_in_progress?(['holding', 'holding_search']))) %>
      <p class="umlaut-unavailable">Not Available</p><%
    end %>
  </div><%
end %>