<% 
# Displays a typical Umlaut response element in typical markup.
# Pass in a ServiceType object for the response using Rails partial
# :object or :collection convention
#optional argument, :locals => 
#    :show_source => default false, if true display the source of the link
show_source ||= false
service_response = fulltext_response_item # passed in via :object or :collection
# passed in in :object or :collection 
view_data = service_response.view_data
institution_code = (view_data[:institution] || service_response.service.group)
# Set the authentcaition based on institution code
unless institution_code.nil? or (view_data[:authentication] and (not view_data[:authentication].blank?))
  service_response.service_data[:authentication] = case institution_code
    when "NYU" then "NYU access only"
    when "HSL" then "HSL access only"
    when "CU" then "Cooper Union access only"
    when "NS" then "New School access only"
    when "NYSID" then "NYSID access only"
  end
end
display_text = view_data[:display_text]
display_text = (/site.ebrary.com\/lib\/nyulibrary/ =~ view_data[:url]) ? "NYU ebrary" : display_text %>
<li class="response_item">
  <%= content_tag :i, nil %>
  <% 
  # Fancy schmancy ajax? But not if we're generating embed partials, won't work.
  # Generate a hyperlink that will call our standard service action
  # due to special class for unobtrusive JS. 
  if view_data[:link_supports_ajax_call] %>
    <%= link_to(display_text, {:controller=>'link_router', :id=>service_response.id},
          {:id => "svctype_link_#{service_response.id}", :target => "_blank", :class => "ajax_window"}) %>
  <% #Collapsible content on page 
  elsif (content = response_content(view_data )) %>
    <%= expand_contract_section(display_text, 
          "svc_id_#{service_response.id}") { content_tag(:div, content, :class => "umlaut-content-indent") } %>
  <% # Ordinary href link
  else %>      
    <%= link_to({:controller=>'link_router', :id=>service_response.id}, 
          {:id => "svctype_link_#{service_response.id}", :target=>"_blank"}) do %>
      <%= coverage_summary(view_data) %>
      <%= display_text %><%
    end
  end %>
  <%= content_tag(:div, "from #{view_data[:source] || service_response.service.display_name}", :class => "umlaut-link-source") if show_source %>
  <%-
    # Show authentication before coverage since we have
    # coverage roll-up
  -%>
  <%= content_tag(:div, "#{view_data[:authentication]}", 
        :class => "response_authentication_instructions text-error") unless view_data[:authentication].blank? %>
  <%-
    # Coverage
  -%>
  <%= content_tag(:div, view_data[:coverage], :class => "response_coverage_statement") unless view_data[:coverage].blank? %>
  <%-
    # legacy, the 'notes' field can take raw html, we need to leave it that way for
    #now, but it's not great.
  -%>
  <%= content_tag(:div, view_data[:notes].html_safe, :class => "response_notes") unless view_data[:notes].blank? %>
  <%-
    # If we're unsure if this is a match, show an edition "warning".
    # If we have edition info from the service response, show that,
    # otherwise, plainly state that this may be an alternate edition.
  -%>
  <%= (content_tag(:div, :class => "edition_warning") {
        (view_data[:edition_str].blank?) ? 
          content_tag(:em, "May be alternate edition.", :class => ["note"]) : 
            (content_tag(:em, "Edition information",:class => ["note"]) + " #{view_data[:edition_str]}")
        }) if ((not view_data[:match_reliability].blank?) && view_data[:match_reliability] != ServiceResponse::MatchExact) %>
  <%-
  # Debug info, hidden with explicit style, can be made visible with javascript.
  -%>
  <div class="debug_info" style="display:none">
    <strong>Debug info:</strong> <%= service_response.service.service_id %>
    <%= "; #{view_data[:debug_info]}" unless view_data[:debug_info].blank? %>
  </div>
</li>
